name: Web Build & Test (Deploy if mainline)

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*.*"

jobs:
  build_and_test:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: xdebug
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: "Stratus Pipeline: Clone"
        uses: actions/checkout@v2
        with:
          repository: pfizer/stratus-ci-scripts
          ref: mainline
          token: ${{ secrets.STRATUS_GITHUB_TOKEN }}
          path: stratus_pipeline

      - name: Configure sysctl limits for ES
        if: contains(env.NEEDS_ES, true)
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
        env:
          NEEDS_ES: ${{ secrets.NEEDS_ES }}

      - name: Runs Elasticsearch
        if: contains(env.NEEDS_ES, true)
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 7.6.0
        env:
          NEEDS_ES: ${{ secrets.NEEDS_ES }}

      - name: Get Composer Cache Directory
        id: composer-cache-dir
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
          
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: |
            ${{ steps.composer-cache-dir.outputs.dir }}
            ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        id: install-composer
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          composer self-update --2
          composer config -g github-oauth.github.com ${{ secrets.STRATUS_GITHUB_TOKEN }}
          composer install --prefer-dist --no-interaction

      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: ./package-lock.json

      - name: Install Dependencies
        id: install-npm
        run: |
          npm ci
          npm run dev

      - name: Setup Environment
        id: setup-environment
        run: |
          export APP_ENV=testing
          cp .env.ci .env

      - name: Test
        id: test-stack
        run: |
          ./vendor/bin/phpstan analyse
          ./vendor/bin/phpunit --coverage-clover clover.xml --stop-on-failure
          php coverage-checker.php clover.xml 75
          npm test

      - name: Checkout cat quality script
        uses: actions/checkout@v2
        with:
          repository: pfizer/cat-quality-script
          ref: github_actions
          path: quality
          token: ${{ secrets.STRATUS_GITHUB_TOKEN }}

      - name: Quality Setup
        run: |
          composer global require phpmetrics/phpmetrics:^2.4
          pip install -r quality/requirements.txt
        env:
          GITHUB_TOKEN: "${{ secrets.STRATUS_GITHUB_TOKEN }}"
  
      - name: Run PHP Metrics
        run: |
          /home/runner/.composer/vendor/bin/phpmetrics --report-json=report.json app
          python quality/quality_service_client_run.py report.json
        env:
          QUICK_AUTH_ID: ${{ secrets.STRATUS_QUICKAUTH_ID }}
          QUICK_AUTH_SECRET: ${{ secrets.STRATUS_QUICKAUTH_SECRET }}
          QUICK_AUTH_URL: ${{ secrets.STRATUS_QUICKAUTH_URI }}
          GITHUB_SHA: ${GITHUB_SHA}
          GITHUB_REPOSITORY: ${GITHUB_REPOSITORY_SLUG}

  cat_quality:
    # To be dropped once we get codeClimate failing on PR's
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: xdebug

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: "Stratus Pipeline: Clone"
        uses: actions/checkout@v2
        with:
          repository: pfizer/stratus-ci-scripts
          ref: mainline
          token: ${{ secrets.STRATUS_GITHUB_TOKEN }}
          path: stratus_pipeline

      - name: Checkout cat quality script
        uses: actions/checkout@v2
        with:
          repository: pfizer/cat-quality-script
          ref: github_actions
          path: quality
          token: ${{ secrets.STRATUS_GITHUB_TOKEN }}

      - name: Quality Setup
        run: |
          composer global require phpmetrics/phpmetrics:^2.4
          pip install -r quality/requirements.txt
        env:
          GITHUB_TOKEN: "${{ secrets.STRATUS_GITHUB_TOKEN }}"
  
      - name: Run PHP Metrics
        run: |
          /home/runner/.composer/vendor/bin/phpmetrics --report-json=report.json app
          python quality/quality_service_client_run.py report.json
        env:
          QUICK_AUTH_ID: ${{ secrets.STRATUS_QUICKAUTH_ID }}
          QUICK_AUTH_SECRET: ${{ secrets.STRATUS_QUICKAUTH_SECRET }}
          QUICK_AUTH_URL: ${{ secrets.STRATUS_QUICKAUTH_URI }}
          GITHUB_SHA: ${GITHUB_SHA}
          GITHUB_REPOSITORY: ${GITHUB_REPOSITORY_SLUG}

  static_analysis:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        output: [html, json]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: CodeClimate
        run: |
          docker run \
            --tty --rm \
            --env CODECLIMATE_CODE="$PWD" \
            --volume "$PWD":/code \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /tmp/cc:/tmp/cc \
            codeclimate/codeclimate analyze -f ${{ matrix.output }} app > climate.${{ matrix.output }}

      - name: process json output
        if: ${{ matrix.output == 'json' }}
        run: |
          echo "process the json output here and fail on big issues..."
    
      - name: Archive CodeClimate results
        uses: actions/upload-artifact@v2
        with:
          name: code-climate-${{ matrix.output }}-report
          path: climate.${{ matrix.output }}

  deploy_mainline:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    needs: build_and_test
    if: success() && (github.ref == 'refs/heads/mainline' || contains(github.event.head_commit.message, '--deploy'))
    steps:
      - uses: actions/checkout@v2

      - name: "Stratus Pipeline: Clone"
        uses: actions/checkout@v2
        with:
          repository: pfizer/stratus-ci-scripts
          ref: mainline
          token: ${{ secrets.STRATUS_GITHUB_TOKEN }}
          path: stratus_pipeline

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STRATUS_AWS_LIMITED_KEY }}
          aws-secret-access-key: ${{ secrets.STRATUS_AWS_LIMITED_SECRET }}
          aws-region: eu-west-1

      - name: Install Dependencies
        id: install-prod-dependencies
        run: |
          composer self-update --2
          composer config -g github-oauth.github.com ${{ secrets.STRATUS_GITHUB_TOKEN }}
          composer install --no-dev --prefer-dist --no-interaction
          export APP_ENV=production
          npm ci
          npm run production

      - name: Zip
        run: |
          printf '[{"name":"${{ secrets.APP_NAME }}-app-staging","imageUri":"364215618558.dkr.ecr.eu-west-1.amazonaws.com/${{ secrets.APP_NAME }}:latest"}]'  > imagedefinitions.json
          zip --quiet -r latest ./

      - name: Upload artifact to AWS
        run: |
          aws --region=eu-west-1 s3 cp latest.zip s3://det-${{ secrets.APP_NAME }}/provision/staging/latest.zip

      - name: Monitor pipeline
        id: start-pipeline
        run: |
          pip install boto3
          python ./stratus_pipeline/common/deploy/check_pipeline.py ${{ secrets.APP_NAME }}-staging ${{ secrets.AWS_REGION }}

  failed_build_get_errors:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    needs: deploy_mainline
    if: failure()
    steps:
      - name: Get codebuild event logs
        id: failed-codebuild-logs
        uses: stumason/codebuild-logs@v1
        env:
          aws-access-key-id: ${{ secrets.STRATUS_AWS_LIMITED_KEY }}
          aws-secret-access-key: ${{ secrets.STRATUS_AWS_LIMITED_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
          codebuild-project-name: ${{ secrets.APP_NAME }}-staging